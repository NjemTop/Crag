version: '3.9'

services:
  base:
    build:
      context: .
      dockerfile: Dockerfile
    image: creg2.0

  web:
    command: bash -c "python3.9 manage.py makemigrations && python3.9 manage.py migrate && python3.9 manage.py runserver 0.0.0.0:8137"
    volumes:
      - mediadata:/app/media
      - logdata:/app/logs
      - migrationsdata:/app/main/migrations
    ports:
      - "8137:8137"
    container_name: Crag
    image: creg2.0
    environment:
      - TZ=Europe/Moscow
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
    restart: always
    depends_on:
      - db
      - rabbitmq
      - graylog

  db:
    image: postgres:13
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_DB=database_1.db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    container_name: DataBase
    volumes:
      - dbdata:/var/lib/postgresql/data
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    container_name: RabbitMQ
    environment:
      - TZ=Europe/Moscow
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  celery:
    command: bash -c "celery -A crag worker --loglevel=info"
    volumes:
      - .:/app
    depends_on:
      - db
      - rabbitmq
    container_name: Celery
    image: creg2.0
    environment:
      - TZ=Europe/Moscow
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
    restart: always

  celerybeat:
    command: bash -c "celery -A crag beat -l info"
    volumes:
      - .:/app
    depends_on:
      - db
      - rabbitmq
    container_name: Celery_Beat
    image: creg2.0
    environment:
      - TZ=Europe/Moscow
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
    restart: always

volumes:
  dbdata:
  migrationsdata:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/main/migrations
      o: bind
  mediadata:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/media
      o: bind
  logdata:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs
      o: bind