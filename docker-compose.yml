version: '3.9'

services:
  base:
    build:
      context: .
      dockerfile: Dockerfile
    image: creg2.0

  web:
    command: bash -c "python3.9 manage.py makemigrations && python3.9 manage.py migrate && python3.9 manage.py runserver 0.0.0.0:8137"
    volumes:
      - mediadata:/app/media
      - logdata:/app/logs
      - migrationsdata:/app/main/migrations
    ports:
      - "8137:8137"
    container_name: Crag
    image: creg2.0
    environment:
      - TZ=Europe/Moscow
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
    restart: always
    depends_on:
      - db
      - rabbitmq
      - graylog

  db:
    image: postgres:13
    environment:
      - TZ=Europe/Moscow
      - POSTGRES_DB=database_1.db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    container_name: DataBase
    volumes:
      - dbdata:/var/lib/postgresql/data
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    container_name: RabbitMQ
    environment:
      - TZ=Europe/Moscow
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  celery:
    command: bash -c "celery -A crag worker --loglevel=info"
    volumes:
      - .:/app
    depends_on:
      - db
      - rabbitmq
    container_name: Celery
    image: creg2.0
    environment:
      - TZ=Europe/Moscow
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
    restart: always

  celerybeat:
    command: bash -c "celery -A crag beat -l info"
    volumes:
      - .:/app
    depends_on:
      - db
      - rabbitmq
    container_name: Celery_Beat
    image: creg2.0
    environment:
      - TZ=Europe/Moscow
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
    restart: always

  graylog:
    image: graylog/graylog:5.1
    container_name: Graylog
    environment:
      - TZ=Europe/Moscow
      - GRAYLOG_HTTP_EXTERNAL_URI=http://195.2.80.251:9000/
      - GRAYLOG_GELF_TCP_INPUT_ENABLED=true  # Включение GELF TCP входа
      - GRAYLOG_MONGODB_URI=mongodb://mongo:27017/graylog  # Указываем URI MongoDB для Graylog
      - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD_SECRET} # Секретная фраза
      - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_ROOT_PASSWORD_SHA2}
    restart: always
    ports:
      - "9000:9000"  # Порт Graylog веб-интерфейса
      - "12201:12201/udp"  # Порт Graylog GELF UDP input
      - "12201:12201" # Порт Graylog GELF TCP input
      - "514:514" # Порт Graylog Syslog TCP input
      - "514:514/udp" # Порт Graylog Syslog UDP input
    volumes:
      - graylogdata:/usr/share/graylog/data
      - ./plugins:/usr/share/graylog/plugin
    depends_on:
      - elasticsearch
      - mongo

  elasticsearch:
    image: elasticsearch:7.12.0
    container_name: Elasticsearch
    environment:
      - TZ=Europe/Moscow
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"  # Опционально: ограничение памяти для Elasticsearch
    restart: always
    ports:
      - "9200:9200"  # Порт Elasticsearch REST API
      - "9300:9300"  # Порт Elasticsearch межузлового общения

  mongo:
    image: mongo:5
    container_name: MongoDB
    environment:
      - TZ=Europe/Moscow
    volumes:
      - mongodata:/data/db
    restart: always

volumes:
  dbdata:
  migrationsdata:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/main/migrations
      o: bind
  mediadata:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/media
      o: bind
  logdata:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs
      o: bind
  mongodata:
    driver: local
  graylogdata:
    driver: local
